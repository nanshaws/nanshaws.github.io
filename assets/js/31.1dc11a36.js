(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{342:function(e,n,o){e.exports=o.p+"assets/img/image-20240217225841249.acfc323a.png"},387:function(e,n,o){"use strict";o.r(n);var t=o(14),a=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_6-1-box2d简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-box2d简介"}},[e._v("#")]),e._v(" 6.1 Box2D简介")]),e._v(" "),n("p",[e._v("Box2D是一个开源的二维物理引擎，用于模拟刚体物体在二维空间中的运动。它被广泛应用于游戏开发中，以实现真实的物理效果。Box2D提供了碰撞检测、刚体动力学和关节等功能，帮助开发者轻松地创建具有物理行为的虚拟世界。")]),e._v(" "),n("h2",{attrs:{id:"_6-2-创建物理世界"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-创建物理世界"}},[e._v("#")]),e._v(" 6.2 创建物理世界")]),e._v(" "),n("p",[e._v("在libGDX中，可以使用以下代码创建一个Box2D物理世界：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.physics.box2d.*;\n\npublic class MyGame extends ApplicationAdapter {\n    private static final float PPM = 100; // 像素每米\n    private World world;\n\n    @Override\n    public void create() {\n        // 设置重力\n        Vector2 gravity = new Vector2(0, -9.8f);\n\n        // 创建物理世界\n        world = new World(gravity, true);\n    }\n\n    // ...\n}\n\n")])])]),n("h2",{attrs:{id:"_6-3-刚体与关节"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-刚体与关节"}},[e._v("#")]),e._v(" 6.3 刚体与关节")]),e._v(" "),n("p",[e._v("刚体（Body）是Box2D中的基本物理实体，表示一个具有质量、形状和运动状态的物体。可以通过以下方式创建一个刚体：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 创建一个矩形刚体\nBodyDef bodyDef = new BodyDef();\nbodyDef.type = BodyDef.BodyType.DynamicBody;\nbodyDef.position.set(new Vector2(50 / PPM, 50 / PPM));\n\nPolygonShape shape = new PolygonShape();\nshape.setAsBox(1, 1);\n\nFixtureDef fixtureDef = new FixtureDef();\nfixtureDef.shape = shape;\nfixtureDef.density = 1.0f;\n\nBody body = world.createBody(bodyDef);\nbody.createFixture(fixtureDef);\nshape.dispose();\n\n")])])]),n("p",[e._v("关节（Joint）用于连接两个或多个刚体，限制它们的相对运动。例如，可以创建一个距离关节来连接两个刚体：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("RevoluteJointDef jointDef = new RevoluteJointDef();\njointDef.bodyA = bodyA;\njointDef.bodyB = bodyB;\njointDef.localAnchorA.set(-0.5f, 0);\njointDef.localAnchorB.set(0.5f, 0);\njointDef.referenceAngle = (float) Math.PI * 0.5f;\n\nworld.createJoint(jointDef);\n\n")])])]),n("h2",{attrs:{id:"_6-4-碰撞监听完整案例教程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-碰撞监听完整案例教程"}},[e._v("#")]),e._v(" 6.4 碰撞监听完整案例教程")]),e._v(" "),n("p",[e._v("要实现碰撞监听，需要创建一个自定义的ContactListener类，并重写其方法。以下是一个简单的碰撞监听示例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public class MyContactListener implements ContactListener {\n    @Override\n    public void beginContact(Contact contact) {\n        // 当两个物体开始接触时调用\n    }\n\n    @Override\n    public void endContact(Contact contact) {\n        // 当两个物体结束接触时调用\n    }\n\n    @Override\n    public void preSolve(Contact contact, Manifold oldManifold) {\n        // 在求解器计算之前调用\n    }\n\n    @Override\n    public void postSolve(Contact contact, ContactImpulse impulse) {\n        // 在求解器计算之后调用\n    }\n}\n\n")])])]),n("p",[e._v("然后在游戏循环中添加碰撞监听：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("world.setContactListener(new MyContactListener());\n")])])]),n("h2",{attrs:{id:"_6-5-完整简单案例代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-5-完整简单案例代码"}},[e._v("#")]),e._v(" 6.5 完整简单案例代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package com.mygdx.game.tutorial01;\n\nimport com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.physics.box2d.*;\n\npublic class Box2DExample extends ApplicationAdapter {\n    private OrthographicCamera camera;\n    private Box2DDebugRenderer debugRenderer;\n    private World world;\n    private Body ground;\n    private Body box;\n    private float PPM=30;\n    @Override\n    public void create() {\n        camera = new OrthographicCamera();\n        camera.setToOrtho(false, Gdx.graphics.getWidth() / PPM, Gdx.graphics.getHeight() / PPM);\n        debugRenderer = new Box2DDebugRenderer();\n\n        world = new World(new Vector2(0, -9.8f), true);\n\n        // 创建地面\n        BodyDef groundDef = new BodyDef();\n        groundDef.position.set(0, 0);\n        ground = world.createBody(groundDef);\n        PolygonShape groundShape = new PolygonShape();\n        groundShape.setAsBox(50, 1);\n        ground.createFixture(groundShape, 0);\n        groundShape.dispose();\n\n        // 创建箱子\n        BodyDef boxDef = new BodyDef();\n        boxDef.type = BodyDef.BodyType.DynamicBody;\n        boxDef.position.set(0, 10);\n        box = world.createBody(boxDef);\n        PolygonShape boxShape = new PolygonShape();\n        boxShape.setAsBox(1, 1);\n        box.createFixture(boxShape, 1);\n        boxShape.dispose();\n    }\n\n    @Override\n    public void render() {\n        Gdx.gl.glClearColor(0, 0, 0, 1);\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n\n        camera.update();\n        debugRenderer.render(world, camera.combined);\n\n        world.step(1 / 60f, 6, 2);\n    }\n\n    @Override\n    public void dispose() {\n        world.dispose();\n        debugRenderer.dispose();\n    }\n}\n\n")])])]),n("p",[n("img",{attrs:{src:o(342),alt:"image-20240217225841249"}})]),e._v(" "),n("h2",{attrs:{id:"_6-6-加入键盘监听器完整案例代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-6-加入键盘监听器完整案例代码"}},[e._v("#")]),e._v(" 6.6 加入键盘监听器完整案例代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("package com.mygdx.game.tutorial01;\n\nimport com.badlogic.gdx.ApplicationAdapter;\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Input;\nimport com.badlogic.gdx.graphics.GL20;\nimport com.badlogic.gdx.graphics.OrthographicCamera;\nimport com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.physics.box2d.*;\n\npublic class Box2DExample extends ApplicationAdapter {\n    private OrthographicCamera camera;\n    private Box2DDebugRenderer debugRenderer;\n    private World world;\n    private Body ground;\n    private Body box;\n    private float PPM=30f;\n    @Override\n    public void create() {\n        camera = new OrthographicCamera();\n        camera.setToOrtho(false, Gdx.graphics.getWidth() / PPM, Gdx.graphics.getHeight() / PPM);\n        debugRenderer = new Box2DDebugRenderer();\n\n        world = new World(new Vector2(0, -9.8f), true);\n        MyContactListener contactListener = new MyContactListener();\n        world.setContactListener(contactListener);\n\n        // 创建地面\n        BodyDef groundDef = new BodyDef();\n        groundDef.type= BodyDef.BodyType.StaticBody;\n        groundDef.position.set(0, 0);\n        ground = world.createBody(groundDef);\n        PolygonShape groundShape = new PolygonShape();\n        groundShape.setAsBox(50, 1);\n        ground.createFixture(groundShape, 0);\n        groundShape.dispose();\n\n        // 创建箱子\n        BodyDef boxDef = new BodyDef();\n        boxDef.type = BodyDef.BodyType.DynamicBody;\n        boxDef.position.set(0, 10);\n        box = world.createBody(boxDef);\n        PolygonShape boxShape = new PolygonShape();\n        boxShape.setAsBox(1, 1);\n        box.createFixture(boxShape, 1);\n        boxShape.dispose();\n    }\n\n    @Override\n    public void render() {\n        Gdx.gl.glClearColor(0, 0, 0, 1);\n        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);\n\n        camera.update();\n        debugRenderer.render(world, camera.combined);\n\n        // 检查用户输入并更新箱子位置\n        if (Gdx.input.isKeyPressed(Input.Keys.A)) {\n            box.setLinearVelocity(-5,0);\n        } else if (Gdx.input.isKeyPressed(Input.Keys.D)) {\n            box.setLinearVelocity(5, 0);\n        } else if (Gdx.input.isKeyPressed(Input.Keys.W)) {\n            box.setLinearVelocity(0, 5);\n        } else if (Gdx.input.isKeyPressed(Input.Keys.S)) {\n            box.setLinearVelocity(0, -5);\n        }\n        world.step(1 / 60f, 6, 2);\n    }\n\n    @Override\n    public void dispose() {\n        world.dispose();\n        debugRenderer.dispose();\n    }\n}\n\n")])])])])}),[],!1,null,null,null);n.default=a.exports}}]);