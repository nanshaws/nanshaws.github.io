(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{309:function(t,e,s){t.exports=s.p+"assets/img/image-20240216131948707.57f1f98c.png"},310:function(t,e,s){t.exports=s.p+"assets/img/image-20240216132136494.32dea9b3.png"},311:function(t,e,s){t.exports=s.p+"assets/img/image-20240216132157589.13686d59.png"},312:function(t,e,s){t.exports=s.p+"assets/img/image-20240216132338124.812e46d6.png"},313:function(t,e,s){t.exports=s.p+"assets/img/image-20240216132634530.73c16416.png"},314:function(t,e,s){t.exports=s.p+"assets/img/image-20240216133947603.454201f1.png"},315:function(t,e,s){t.exports=s.p+"assets/img/image-20240216134142722.88e5c85a.png"},316:function(t,e,s){t.exports=s.p+"assets/img/image-20240216134240412.04d34e36.png"},317:function(t,e,s){t.exports=s.p+"assets/img/image-20240216143845151.0272cf8b.png"},318:function(t,e,s){t.exports=s.p+"assets/img/image-20240216144406154.695eab8d.png"},319:function(t,e,s){t.exports=s.p+"assets/img/image-20240216144559111.f2032955.png"},320:function(t,e,s){t.exports=s.p+"assets/img/image-20240216144902082.86ec4a21.png"},321:function(t,e,s){t.exports=s.p+"assets/img/image-20240216144920531.f163cc1e.png"},322:function(t,e,s){t.exports=s.p+"assets/img/image-20240216184553375.ba3d8c56.png"},383:function(t,e,s){"use strict";s.r(e);var a=s(14),i=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"ui教程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ui教程"}},[t._v("#")]),t._v(" Ui教程")]),t._v(" "),e("p",[t._v("Skin Composer 是一个可视化的界面编辑器，用于为 libGDX 游戏创建 UI 组件。Scene Composer 是 Skin Composer 的一个功能，它允许你创建和管理多个场景。以下是使用 Skin Composer 的 Scene Composer 的基本步骤：")]),t._v(" "),e("ol",[e("li",[t._v("首先，你需要安装 Skin Composer。你可以从官方网站（https://skin-composer.com/）下载并安装适用于你的操作系统的版本。")]),t._v(" "),e("li",[t._v('启动 Skin Composer，然后点击 "Create Project" 按钮创建一个新的 libGDX 项目。')]),t._v(" "),e("li",[t._v('在 "Project Settings" 对话框中，输入你的项目名称和包名，然后选择一个 libGDX 版本。点击 "Finish" 按钮创建项目。')]),t._v(" "),e("li",[t._v('在 Skin Composer 的主界面上，点击左侧的 "Scene Composer" 图标。这将打开 Scene Composer。')]),t._v(" "),e("li",[t._v('在 Scene Composer 中，你可以看到一个空白的画布。要添加 UI 组件，只需从左侧的 "Widgets" 面板中拖放组件到画布上。例如，你可以拖放一个 "Label" 组件来创建一个文本标签。')]),t._v(" "),e("li",[t._v('选中画布上的组件后，你可以在右侧的 "Properties" 面板中修改组件的属性，如文本、颜色、字体等。')]),t._v(" "),e("li",[t._v('若要添加更多场景，请点击左上角的 "Add Scene" 按钮。这将在下方的场景列表中创建一个新的空白场景。你可以为每个场景添加不同的 UI 组件。')]),t._v(" "),e("li",[t._v("若要在场景之间切换，只需在场景列表中选择相应的场景即可。你可以通过点击场景名称旁边的复选框来启用或禁用场景。")]),t._v(" "),e("li",[t._v('当你完成 UI 设计后，点击顶部菜单栏的 "File" > "Export Skin" 将 UI 皮肤导出为 JSON 文件。这个文件可以用于你的 libGDX 项目。')])]),t._v(" "),e("p",[t._v("打开Skin Composer软件")]),t._v(" "),e("p",[e("img",{attrs:{src:s(309),alt:"image-20240216131948707"}})]),t._v(" "),e("p",[t._v("点击Project ---\x3e  Scene Composer")]),t._v(" "),e("p",[e("img",{attrs:{src:s(310),alt:"image-20240216132136494"}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(311),alt:"image-20240216132157589"}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(312),alt:"image-20240216132338124"}})]),t._v(" "),e("p",[t._v("set  Widget是设置小部件的意思")]),t._v(" "),e("p",[e("img",{attrs:{src:s(313),alt:"image-20240216132634530"}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(314),alt:"image-20240216133947603"}})]),t._v(" "),e("p",[t._v("设置一下按钮样式")]),t._v(" "),e("p",[e("img",{attrs:{src:s(315),alt:"image-20240216134142722"}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(316),alt:"image-20240216134240412"}})]),t._v(" "),e("h1",{attrs:{id:"注意"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[t._v("#")]),t._v(" 注意")]),t._v(" "),e("p",[t._v("我们有两种方式创建ui，第一种方式是直接在table上面写，设置table的背景，然后在table上面搞两个按钮，类似于：")]),t._v(" "),e("p",[t._v("下面是因为我的按钮大小太大了，所以搞至不美观")]),t._v(" "),e("p",[e("img",{attrs:{src:s(317),alt:"image-20240216143845151"}})]),t._v(" "),e("p",[t._v("另外一种方式是在cell后面搞一个Stack,然后设置image和table，然后再在table里面设置按钮")]),t._v(" "),e("p",[e("img",{attrs:{src:s(318),alt:"image-20240216144406154"}})]),t._v(" "),e("p",[t._v("如果有像样的素材可以做出蛮不错的页面：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(319),alt:"image-20240216144559111"}})]),t._v(" "),e("h1",{attrs:{id:"最后导出"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最后导出"}},[t._v("#")]),t._v(" 最后导出")]),t._v(" "),e("p",[e("img",{attrs:{src:s(320),alt:"image-20240216144902082"}})]),t._v(" "),e("p",[t._v("导出json文件")]),t._v(" "),e("p",[e("img",{attrs:{src:s(321),alt:"image-20240216144920531"}})]),t._v(" "),e("p",[t._v("然后copy一下java代码即可")]),t._v(" "),e("p",[e("img",{attrs:{src:s(322),alt:"image-20240216184553375"}})]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('stage = new Stage(new ScreenViewport());\nskin = new Skin(Gdx.files.internal("t1.json"));\nGdx.input.setInputProcessor(stage);\n\nTable table = new Table();\ntable.setFillParent(true);\n\nStack stack = new Stack();\n\nImage image = new Image(skin, "t1");\nstack.addActor(image);\n\nTable table1 = new Table();\n\nButton button = new Button(skin);\ntable1.add(button);\nstack.addActor(table1);\ntable.add(stack);\nstage.addActor(table);\n')])])])])}),[],!1,null,null,null);e.default=i.exports}}]);