(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{389:function(e,n,a){"use strict";a.r(n);var t=a(14),i=Object(t.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_8-1-路径查找"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-路径查找"}},[e._v("#")]),e._v(" 8.1 路径查找")]),e._v(" "),n("p",[e._v("在libGDX中，可以使用AStar类进行路径查找。以下是一个简单的示例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import com.badlogic.gdx.math.Vector2;\nimport com.badlogic.gdx.utils.Array;\nimport com.badlogic.gdx.ai.pfa.DefaultConnection;\nimport com.badlogic.gdx.ai.pfa.PathFinderAdapter;\nimport com.badlogic.gdx.ai.pfa.indexed.IndexedAStarPathFinder;\nimport com.badlogic.gdx.ai.pfa.indexed.IndexedAStarPathFinder.Path;\nimport com.badlogic.gdx.maps.tiled.TiledMap;\nimport com.badlogic.gdx.maps.tiled.TiledMapTileLayer;\n\npublic class PathfindingExample {\n    public static void main(String[] args) {\n        // 加载地图\n        TiledMap map = new TmxMapLoader().load("pathfinding_map.tmx");\n        TiledMapTileLayer layer = (TiledMapTileLayer) map.getLayers().get(0);\n\n        // 创建路径查找器\n        PathFinderAdapter<Vector2> pathFinderAdapter = new TiledMapAdapter(layer);\n        IndexedAStarPathFinder<Vector2> pathFinder = new IndexedAStarPathFinder<>(pathFinderAdapter, false);\n\n        // 设置起点和终点\n        Vector2 start = new Vector2(1, 1);\n        Vector2 end = new Vector2(10, 10);\n\n        // 查找路径\n        Path<Vector2> path = pathFinder.findPath(start, end);\n        System.out.println("找到的路径：" + path);\n    }\n}   \n')])])]),n("h2",{attrs:{id:"_8-2-ai行为树"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-ai行为树"}},[e._v("#")]),e._v(" 8.2 AI行为树")]),e._v(" "),n("p",[e._v("在libGDX中，可以使用BehaviorTree类进行AI行为树的构建和执行。以下是一个简单的示例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import com.badlogic.gdx.ai.btree.BehaviorTree;\nimport com.badlogic.gdx.ai.btree.Decorator;\nimport com.badlogic.gdx.ai.btree.Task;\nimport com.badlogic.gdx.ai.btree.decorator.Invert;\nimport com.badlogic.gdx.ai.btree.decorator.Succeeder;\nimport com.badlogic.gdx.ai.btree.task.Condition;\nimport com.badlogic.gdx.ai.btree.task.Selector;\nimport com.badlogic.gdx.ai.btree.task.Sequence;\n\npublic class BehaviorTreeExample {\n    public static void main(String[] args) {\n        // 创建行为树节点\n        Condition isHealthy = new IsHealthy();\n        Condition isHungry = new IsHungry();\n        Task eat = new Eat();\n        Task drink = new Drink();\n\n        // 构建行为树\n        Sequence sequence = new Sequence();\n        sequence.addChild(isHealthy);\n        sequence.addChild(isHungry);\n\n        Decorator invert = new Invert();\n        invert.addChild(isHealthy);\n\n        Selector selector = new Selector();\n        selector.addChild(sequence);\n        selector.addChild(invert);\n        selector.addChild(eat);\n        selector.addChild(drink);\n\n        BehaviorTree<Void> behaviorTree = new BehaviorTree<>(selector);\n\n        // 执行行为树\n        while (!behaviorTree.isFinished()) {\n            behaviorTree.step();\n        }\n    }\n}    \n")])])]),n("h2",{attrs:{id:"_8-3-状态机-完整代码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-3-状态机-完整代码"}},[e._v("#")]),e._v(" 8.3 状态机，完整代码")]),e._v(" "),n("p",[e._v("在libGDX中，可以使用StateMachine类进行状态机的构建和执行。以下是一个简单的示例：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import com.badlogic.gdx.ai.fsm.State;\nimport com.badlogic.gdx.ai.fsm.StateMachine;\nimport com.badlogic.gdx.ai.fsm.StateTransition;\nimport com.badlogic.gdx.ai.fsm.Transition;\n\npublic class StateMachineExample {\n    public static void main(String[] args) {\n        // 创建状态\n        State idleState = new IdleState();\n        State walkState = new WalkState();\n        State runState = new RunState();\n\n        // 创建状态转换条件\n        Transition idleToWalk = new Transition() {\n            @Override\n            public boolean evaluate() {\n                return playerIsWalking();\n            }\n        };\n        Transition walkToRun = new Transition() {\n            @Override\n            public boolean evaluate() {\n                return playerIsRunning();\n            }\n        };\n        Transition runToIdle = new Transition() {\n            @Override\n            public boolean evaluate() {\n                return playerIsIdle();\n            }\n        };\n\n        // 创建状态转换\n        StateTransition idleToWalkTransition = new StateTransition(idleState, walkState, idleToWalk);\n        StateTransition walkToRunTransition = new StateTransition(walkState, runState, walkToRun);\n        StateTransition runToIdleTransition = new StateTransition(runState, idleState, runToIdle);\n\n        // 创建状态机并添加状态转换\n        StateMachine stateMachine = new StateMachine();\n        stateMachine.addTransition(idleToWalkTransition);\n        stateMachine.addTransition(walkToRunTransition);\n        stateMachine.addTransition(runToIdleTransition);\n\n        // 设置初始状态并执行状态机\n        stateMachine.setInitialState(idleState);\n        while (!stateMachine.isInState(idleState)) {\n            stateMachine.update();\n        }\n    }\n}\n\n")])])])])}),[],!1,null,null,null);n.default=i.exports}}]);