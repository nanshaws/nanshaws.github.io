(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{388:function(t,e,n){"use strict";n.r(e);var s=n(14),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"_7-1-http请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-http请求"}},[t._v("#")]),t._v(" 7.1 HTTP请求")]),t._v(" "),e("p",[t._v("在libGDX中，可以使用HttpRequest类来发送HTTP请求。以下是一个简单的示例：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package com.mygdx.game.http;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Net;\nimport com.badlogic.gdx.net.HttpRequestBuilder;\nimport com.badlogic.gdx.net.HttpStatus;\n\npublic class HttpExample {\n    public static void send() {\n        HttpRequestBuilder requestBuilder = new HttpRequestBuilder();\n        Net.HttpRequest httpRequest = requestBuilder.newRequest().method(Net.HttpMethods.GET).url("https://www.google.de").content("q=libgdx&example=example").build();\n        Gdx.net.sendHttpRequest(httpRequest, httpResponseListener);\n        //有参数的\n//        HttpRequestBuilder requestBuilder = new HttpRequestBuilder();\n//        HttpRequest httpRequest = requestBuilder.newRequest().method(HttpMethods.GET).url("https://www.google.de").content("q=libgdx&example=example").build();\n//        Gdx.net.sendHttpRequest(httpRequest, httpResponseListener);\n\n    }\n\n    private static final Net.HttpResponseListener httpResponseListener = new Net.HttpResponseListener() {\n        @Override\n        public void handleHttpResponse(Net.HttpResponse httpResponse) {\n            if (httpResponse.getStatus().getStatusCode() == HttpStatus.SC_OK) {\n                System.out.println("请求成功，响应内容：" + httpResponse.getResultAsString());\n            } else {\n                System.out.println("请求失败，状态码：" + httpResponse.getStatus().getStatusCode());\n            }\n        }\n\n        @Override\n        public void failed(Throwable throwable) {\n            System.out.println("失败");\n        }\n\n        @Override\n        public void cancelled() {\n            System.out.println("取消");\n        }\n    };\n\n}\n')])])]),e("h2",{attrs:{id:"tcp通信-客户端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp通信-客户端"}},[t._v("#")]),t._v(" TCP通信，客户端")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package com.mygdx.game.tcp;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Net;\nimport com.badlogic.gdx.net.Socket;\nimport com.badlogic.gdx.net.SocketHints;\n\nimport java.io.OutputStream;\n\npublic class Client extends Thread{\n    @Override\n    public void run() {\n        receivedTCP();\n    }\n\n    public  void receivedTCP() {\n        // 创建客户端套接字\n        Socket socket = Gdx.net.newClientSocket(Net.Protocol.TCP, "localhost", 8080, null);\n\n        try {\n            // 获取输出流\n            OutputStream outputStream = socket.getOutputStream();\n\n            // 发送数据到服务器\n            outputStream.write("Hello, server!".getBytes());\n            outputStream.flush();\n            // 读取服务器响应\n            byte[] data = new byte[1024];\n            int length = socket.getInputStream().read(data);\n            String message = new String(data, 0, length);\n            System.out.println("Received from server: " + message);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            // 关闭客户端套接字\n            socket.dispose();\n        }\n    }\n}\n\n')])])]),e("h2",{attrs:{id:"tcp通信-服务端"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp通信-服务端"}},[t._v("#")]),t._v(" TCP通信，服务端")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('package com.mygdx.game.tcp;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.Net;\nimport com.badlogic.gdx.net.ServerSocket;\nimport com.badlogic.gdx.net.Socket;\nimport com.badlogic.gdx.net.SocketHints;\n\nimport java.io.OutputStream;\n\npublic class Server extends Thread {\n    @Override\n    public void run() {\n        openTcp();\n    }\n\n    public  void openTcp() {\n        // 创建服务端套接字\n        ServerSocket serverSocket = Gdx.net.newServerSocket(Net.Protocol.TCP, 8080, null);\n\n        while (true) {\n            // 等待客户端连接\n            Socket socket = serverSocket.accept(null);\n\n            try {\n                // 获取输出流\n                OutputStream outputStream = socket.getOutputStream();\n\n                // 读取客户端发送的数据\n                byte[] data = new byte[1024];\n                int length = socket.getInputStream().read(data);\n                String message = new String(data, 0, length);\n                System.out.println("Received from client: " + message);\n\n                // 向客户端发送响应\n                outputStream.write("Hello, client!".getBytes());\n                outputStream.flush();\n            } catch (Exception e) {\n                e.printStackTrace();\n            } finally {\n                // 关闭客户端套接字\n                socket.dispose();\n            }\n        }\n    }\n}\n\n')])])])])}),[],!1,null,null,null);e.default=a.exports}}]);